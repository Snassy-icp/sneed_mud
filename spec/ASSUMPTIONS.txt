SNEED MUD - Technical Assumptions
================================

This document lists the core technical assumptions that inform the design of all game systems.

1. Internet Computer Platform Constraints
---------------------------------------
- Update calls have 1-2 second latency (minimum)
- Query calls should not exceed once per second frequency
- State updates and combat actions must account for these latencies
- All timing values in specifications must respect these technical limitations

2. Backend Architecture Constraints
---------------------------------
- No recurring timer events or game loops exist on the backend
- All state changes are driven by explicit user actions (button clicks)
- Backend has no autonomous update mechanisms
- Time-based mechanics must be calculated based on timestamps at time of user actions
- IC handles all command queuing and state transaction management natively
- Frontend maintains a query loop for state updates, but cannot drive backend "ticks"

Frontend Timer Exception
----------------------
While the backend cannot maintain timers, the frontend may implement UI convenience timers that:
- Help automate repetitive user actions
- Must respect all backend cooldowns and restrictions
- Cannot bypass or modify backend state management
- Must be implemented purely as UI assistance features

3. Data Formatting and Display Principles
---------------------------------------
- Backend sends only structured data, never pre-formatted strings
- Frontend is responsible for all data formatting and display
- This separation ensures:
  a) Consistent data structures for all operations
  b) Flexible display options without backend changes
  c) Easier testing and validation of data
  d) Clear separation of concerns between data and presentation
  e) Ability to support multiple display formats/languages

4. Derived Value Calculations
---------------------------
- All game mechanic calculations must be performed on the backend
- Frontend should never recalculate values that affect gameplay
- This ensures:
  a) Consistent game mechanics across all clients
  b) Single source of truth for game formulas
  c) No floating-point or type conversion issues between languages
  d) Easier testing and validation of game mechanics
  e) Simpler frontend code focused on display logic

Impact:
- All backend responses should use well-defined data structures
- Text formatting and layout is handled exclusively by frontend
- Message logs and display text generated from structured data
- Frontend maintains responsibility for "pretty printing" all data
- Changes to display format only require frontend updates
- Game mechanics and calculations performed only on backend
- Frontend displays pre-calculated values without modification
